
// This file now contains core type definitions that are NOT dependent on i18n data.
// Definitions that rely on labels from JSON (like SIZES, ALIGNMENTS array constants)
// will be generated by the I18nProvider and accessed via context.

import type { LanguageCode } from '@/i18n/config';

export type LocalizedString = string | { [key in LanguageCode]?: string } | { en: string; [key: string]: string };

export type AbilityName = 'strength' | 'dexterity' | 'constitution' | 'intelligence' | 'wisdom' | 'charisma' | 'none';

export interface AbilityScores {
  strength: number;
  dexterity: number;
  constitution: number;
  intelligence: number;
  wisdom: number;
  charisma: number;
}

export interface CharacterClass {
  id: string;
  className: DndClassId | ''; // kebab-case ID
  level: number;
}

export interface CustomSynergyRule {
  id: string;
  targetSkillName: string; // Skill ID
  ranksInThisSkillRequired: number;
  bonusGranted: number;
}

export interface Skill {
  id: string;
  ranks: number;
  miscModifier: number;
  isClassSkill?: boolean;
}

export interface FeatPrerequisiteDetails {
  bab?: number;
  abilities?: Partial<Record<Exclude<AbilityName, 'none'>, number>>;
  skills?: Array<{ id: string; ranks: number }>;
  feats?: string[];
  casterLevel?: number;
  classLevel?: { classId: DndClassId | string; level: number };
  raceId?: DndRaceId | string;
  alignment?: string; // This might be a specific alignment value or a generic one like "lawful"
  special?: LocalizedString;
  specialConditions?: Array<{ // For more complex, non-standard prerequisites
    type: string; // e.g., "hasFeatSpecialization", "isRangerStyleFeat"
    [key: string]: any; // Other properties specific to the condition type
  }>;
}

export interface FeatEffectScalingSpecificLevel {
  level: number;
  value: any; // number, string, dice object, etc.
  tierName?: LocalizedString; // e.g., "Greater Rage", "Mighty Rage"
}

export interface FeatEffectScaling {
  classId: DndClassId | string; // The class whose level dictates the scaling
  specificLevels: FeatEffectScalingSpecificLevel[];
  valuePerLevel?: number;
}

// Base for all aggregated effects to carry common properties
export interface AggregatedFeatEffectBase {
  sourceFeat?: LocalizedString;
  condition?: string;
  isActive?: boolean;
}


// Structured feat effect types
export interface SkillEffectDetail {
  type: "skill";
  skillId: string | null; // null for specialization (e.g. Skill Focus (SPEC))
  value: number;
  bonusType?: "competence" | "circumstance" | "racial" | "untyped" | "insight";
  scaleWithClassLevel?: FeatEffectScaling;
}

export interface NoteEffectDetail { // This will be used for descriptive notes
  type: "note";
  text: LocalizedString;
}

export interface AbilityScoreEffect {
  type: "abilityScore";
  ability: Exclude<AbilityName, 'none'>;
  value: number | string;
  bonusType?: "enhancement" | "inherent" | "morale" | "competence" | "circumstance" | "size" | "untyped";
  scaleWithClassLevel?: FeatEffectScaling;
}

export interface SavingThrowEffect {
  type: "savingThrow";
  save: SavingThrowType | "all";
  value: number;
  bonusType?: "resistance" | "luck" | "morale" | "competence" | "circumstance" | "racial" | "insight" | "untyped";
  scaleWithClassLevel?: FeatEffectScaling;
}

export interface AttackRollEffect {
  type: "attackRoll";
  value: number;
  bonusType?: "untyped" | "enhancement" | "competence" | "luck" | "insight" | "circumstance" | "focus";
  appliesTo: "all" | "melee" | "ranged" | "unarmed" | "grapple" | "SPEC" | `weaponCategory:${string}` | `weaponName:${string}`;
  weaponId?: string; // Use for specific weapon definition ID (e.g. "longsword")
  rangeLimit?: number;
  scaleWithClassLevel?: FeatEffectScaling;
}

export interface DamageRollEffect {
  type: "damageRoll";
  value: number | string; // Can be a number or a dice string like "1d6"
  bonusType?: "untyped" | "enhancement" | "competence" | "luck" | "precision" | "circumstance" | "specialization";
  appliesTo?: "all" | "melee" | "ranged" | "unarmed" | "grapple" | "SPEC" | `weaponCategory:${string}` | `weaponName:${string}`;
  weaponId?: string; // Use for specific weapon definition ID
  rangeLimit?: number;
  scaleWithClassLevel?: FeatEffectScaling;
}

export interface ArmorClassEffect {
  type: "armorClass";
  value: number | "WIS" | "INT" | "CHA";
  acType: "dodge" | "armor" | "shield" | "natural" | "deflection" | "insight" | "circumstance" | "untyped" | "monk_wisdom" | "monkScaling" | "other_feat_bonus";
  bonusType?: "untyped" | "dodge" | "armor" | "shield" | "natural" | "deflection" | "insight" | "sacred" | "profane" | "competence" | "circumstance";
  appliesToScope?: ("normal" | "touch" | "flatFooted")[];
  scaleWithClassLevel?: FeatEffectScaling;
}

export interface HitPointsEffect {
  type: "hitPoints";
  value: number;
  perLevel?: boolean;
  bonusType?: "untyped";
  scaleWithClassLevel?: FeatEffectScaling;
}

export interface InitiativeEffect {
  type: "initiative";
  value: number;
  bonusType?: "competence" | "insight" | "untyped";
  scaleWithClassLevel?: FeatEffectScaling;
}

export interface SpeedEffect {
  type: "speed";
  speedType: SpeedType | "all";
  modification: "bonus" | "setAbsolute" | "penalty";
  value: number;
  bonusType?: "enhancement" | "untyped";
  scaleWithClassLevel?: FeatEffectScaling;
}

export interface ResistanceEffect {
  type: "resistance";
  resistanceTo: string; // e.g., "fire", "cold", "acid", "electricity", "sonic", "spell", "power", "damageReduction"
  value: number;
  isDamageReduction?: boolean; // True if this is a DR X/- or DR X/magic effect
  bypassedBy?: string[]; // e.g., ["magic", "adamantine"] for DR
  bonusType?: "resistance" | "untyped";
  scaleWithClassLevel?: FeatEffectScaling;
}

export interface CasterLevelCheckEffect {
  type: "casterLevelCheck";
  value: number;
  forEvent?: "spellResistance" | "dispel" | "all";
  bonusType?: "untyped" | "competence";
  scaleWithClassLevel?: FeatEffectScaling;
}

export interface SpellSaveDcEffect {
  type: "spellSaveDc";
  school?: string | "all" | "SPEC";
  value: number;
  bonusType?: "untyped";
  scaleWithClassLevel?: FeatEffectScaling;
}

export interface TurnUndeadEffect {
  type: "turnUndead";
  property: "attempts" | "effectiveLevel" | "damage" | "checkBonus";
  value: number;
  bonusType?: "untyped";
  scaleWithClassLevel?: FeatEffectScaling;
}

export interface GrantsAbilityEffectUses {
  per: "day" | "encounter";
  value?: number | "levelBased" | "abilityModBased" | "scaled";
  basedOnAbility?: Exclude<AbilityName, 'none'>;
  scaleWithClassLevel?: FeatEffectScaling;
  isActive?: boolean;
}

export interface GrantsAbilityEffect {
  type: "grantsAbility";
  abilityKey: string; // Unique identifier for the granted ability
  name: LocalizedString; // Display name
  details?: LocalizedString; // Description
  uses?: GrantsAbilityEffectUses;
  actionType?: "standard" | "move" | "fullRound" | "free" | "swift" | "immediate" | "reaction" | "passive";
  scaleWithClassLevel?: FeatEffectScaling; // For abilities whose own properties might scale
}

export interface ModifiesMechanicEffect {
  type: "modifiesMechanic";
  mechanicKey: string;
  change?: "adds" | "sets" | "removes";
  value?: any;
  scaleWithClassLevel?: FeatEffectScaling;
}

export interface GrantsProficiencyEffect {
  type: "grantsProficiency";
  proficiencyType: "weapon" | "armor" | "shield";
  itemCategory?: "simple" | "martial" | "exotic" | "light" | "medium" | "heavy" | "tower";
  specificItem?: string;
  note?: LocalizedString;
}

export interface BonusFeatSlotEffect {
  type: "bonusFeatSlot";
  category: string;
  count: number;
  note?: LocalizedString;
}

export interface LanguageEffect {
  type: "language";
  count?: number;
  specific?: LanguageId;
  note?: LocalizedString;
}

export interface DamageReductionFeatEffect {
  type: "damageReduction";
  drType: DamageReductionTypeValue | string; // e.g., 'none', 'magic', 'adamantine', etc. 'none' for DR X/-
  value: number; // The amount of DR
  scaleWithClassLevel?: FeatEffectScaling;
}

export type FeatEffectDetail = (
  | SkillEffectDetail
  | NoteEffectDetail
  | AbilityScoreEffect
  | SavingThrowEffect
  | AttackRollEffect
  | DamageRollEffect
  | ArmorClassEffect
  | HitPointsEffect
  | InitiativeEffect
  | SpeedEffect
  | ResistanceEffect
  | CasterLevelCheckEffect
  | SpellSaveDcEffect
  | TurnUndeadEffect
  | GrantsAbilityEffect
  | ModifiesMechanicEffect
  | GrantsProficiencyEffect
  | BonusFeatSlotEffect
  | LanguageEffect
  | DamageReductionFeatEffect
) & Pick<AggregatedFeatEffectBase, 'condition' | 'sourceFeat'>;


export type FeatTypeString = string;

export interface FeatDefinitionJsonData {
  value: string; // Unique identifier for the feat
  label: LocalizedString; // Display name
  description?: LocalizedString;
  prerequisites?: FeatPrerequisiteDetails;
  effectsText?: LocalizedString;
  effects?: FeatEffectDetail[];
  canTakeMultipleTimes?: boolean;
  requiresSpecialization?: string; // e.g., "weapon", "skill", "school of magic"
  requiresSpecializationCategory?: string; // For Fighter Bonus Feats, specific category like 'weaponFocusFeats'
  isClassFeature?: boolean; // True if this is a class feature automatically granted, not chosen
  isCustom?: boolean;
  category?: string; // e.g., "fighterBonusFeat", "monkBonusFeat", "rogueSpecialAbility"
  permanentEffect?: boolean; // If true, conditional effects are considered always active
}


export interface CharacterFeatInstance {
  definitionId: string;
  instanceId: string;
  specializationDetail?: string;
  chosenSpecializationCategory?: string;
  isGranted?: boolean;
  grantedNote?: LocalizedString;
  conditionalEffectStates?: Record<string, boolean>;
}

export type ItemBaseType = 'weapon' | 'armor' | 'shield' | 'potion' | 'scroll' | 'wand' | 'ring' | 'amulet' | 'boots' | 'belt' | 'bracers' | 'cloak' | 'gloves' | 'headband' | 'robe' | 'rod' | 'staff' | 'wondrous' | 'other';
export type WeaponStyleType = 'melee' | 'ranged' | 'melee-or-ranged';
export type WeaponProficiencyCategory = 'simple' | 'martial' | 'exotic';

export interface Item {
  id: string;
  name: LocalizedString;
  quantity: number;
  description?: LocalizedString;
  weight?: number;
  itemType?: ItemBaseType;
  // Weapon-specific properties
  weaponType?: WeaponStyleType;
  damage?: string; // e.g., "1d8"
  criticalRange?: string; // e.g., "19-20"
  criticalMultiplier?: string; // e.g., "x2"
  rangeIncrement?: number;
  damageType?: LocalizedString; // e.g., "Slashing", "Bludgeoning and Piercing"
  isFinesseWeapon?: boolean;
  isLightWeapon?: boolean;
  isTwoHandedWeapon?: boolean;
  proficiencyCategory?: WeaponProficiencyCategory;
  specialProperties?: LocalizedString;
  // Armor/Shield specific properties
  armorBonus?: number;
  shieldBonus?: number;
  maxDexBonus?: number;
  armorCheckPenalty?: number;
  spellFailureChance?: number;
  speedWhenWorn?: number;
  armorType?: 'light' | 'medium' | 'heavy' | 'shield';
}


export type SavingThrowType = 'fortitude' | 'reflex' | 'will';

export interface SingleSavingThrow {
  base: number;
  magicMod: number;
  miscMod: number;
}
export interface SavingThrows {
  fortitude: SingleSavingThrow;
  reflex: SingleSavingThrow;
  will: SingleSavingThrow;
}

export interface ResistanceValue {
  base: number;
  customMod: number;
}

export type DamageReductionTypeValue = string;
export type DamageReductionRuleValue = string;

export interface DamageReductionInstance {
  id: string;
  value: number;
  type: DamageReductionTypeValue | string;
  rule: DamageReductionRuleValue;
  isGranted?: boolean;
  source?: LocalizedString;
}

export interface SpeedDetails {
  base: number;
  miscModifier: number;
}

export type CharacterSize =
  | "fine" | "diminutive" | "tiny" | "small" | "medium" | "large" | "huge" | "gargantuan" | "colossal" | '';

export type CharacterAlignment =
  | "lawful-good" | "neutral-good" | "chaotic-good"
  | "lawful-neutral" | "true-neutral" | "chaotic-neutral"
  | "lawful-evil" | "neutral-evil" | "chaotic-evil" | '';

export type DndRaceId = string;
export type DndClassId = string;
export type DndDeityId = string;
export type GenderId = string;
export type LanguageId = string;
export type DomainId = string;
export type MagicSchoolId = string;


export interface LanguageOption {
  value: LanguageId;
  label: LocalizedString; // Changed to LocalizedString
}

export interface CharacterSizeObject {
  value: CharacterSize;
  label: LocalizedString; // Changed
  acModifier: number;
  skillModifiers?: Record<string, number>;
  grappleDamage?: string;
}

export interface CharacterAlignmentObject {
  value: CharacterAlignment;
  label: LocalizedString; // Changed
  description: LocalizedString; // Changed
}

export interface ClassCastingDetails {
  type: 'full' | 'partial' | 'none';
  casterAbility?: Exclude<AbilityName, 'none' | 'strength' | 'dexterity' | 'constitution'>;
  startsAtLevel?: number;
  levelOffset?: number;
}

export interface ClassAttribute {
  key: LocalizedString; // Changed
  value: LocalizedString; // Changed
}

export interface ClassSpecificUIBlockConditionAggregatedEffect {
  property: keyof AggregatedFeatEffects;
  comparison: 'exists' | 'greaterThan' | 'equals' | 'lessThan' | 'notEquals';
  value?: any;
}

export interface ClassSpecificUIBlock {
  key: string; // Unique key to identify the UI block, e.g., "rangerCombatStyle"
  labelKey: string; // Key for UI_STRINGS to get the display label/title
  requiredLevel?: number;
  conditionAggregatedEffect?: ClassSpecificUIBlockConditionAggregatedEffect;
  conditionDependsOnUIStateKey?: keyof Pick<Character, 'chosenSpecializationSchool'>; // For wizard prohibited schools
  conditionDependsOnUIStateValueNotIn?: Array<string | null | undefined>; // For wizard prohibited schools
}

export interface FeatChoiceFilterCase {
  choiceValue: string;
  noteMustContain: LocalizedString; // Changed for notes which might be translated
}

export interface FeatChoiceFilter {
  characterField: keyof Pick<Character, 'chosenCombatStyle'>; // Extend this union for other choice fields if needed
  filterCases: FeatChoiceFilterCase[];
}

export interface DndRaceOption {
  value: DndRaceId;
  label: LocalizedString; // Changed
  generalDescription?: LocalizedString; // Changed
  loreAttributes?: ClassAttribute[];
  bonusFeatSlots?: number;
  racialSkillBonuses?: Record<string, number>;
  grantedFeats?: Array<{ featId: string; note?: LocalizedString; name?: LocalizedString; levelAcquired?: number }>; // Changed
  speeds?: Partial<Record<SpeedType, number>>;
  automaticLanguages?: LanguageId[];
}
export interface DndClassOption {
  value: DndClassId | string;
  label: LocalizedString; // Changed
  hitDice: string;
  babProgression: "good" | "average" | "poor";
  spellcasting?: ClassCastingDetails;
  generalDescription: LocalizedString; // Changed
  loreAttributes?: ClassAttribute[];
  grantedFeats?: Array<{ featId: string; note?: LocalizedString; name?: LocalizedString; levelAcquired?: number }>; // Changed
  saves?: {
    fortitude: "good" | "poor";
    reflex: "good" | "poor";
    will: "good" | "poor";
  };
  uiSections?: ClassSpecificUIBlock[];
  featChoiceFilters?: FeatChoiceFilter[]; // New field
  classSpecificFeats?: FeatDefinitionJsonData[]; // For feats defined within this class file
}

export interface DeityAttribute {
  key: LocalizedString; // Changed
  value: LocalizedString; // Changed
}
export interface DndDeityOption {
  value: DndDeityId | string;
  label: LocalizedString; // Changed
  alignment: CharacterAlignment | '';
  fullName: LocalizedString; // Changed
  attributes: DeityAttribute[];
}

export interface SkillDefinitionJsonData {
  value: string;
  label: LocalizedString; // Changed
  keyAbility: AbilityName | string;
  description?: LocalizedString; // Changed
}

export type ClassSkillsJsonData = Record<string, string[]>;
export type ClassSkillPointsBaseJsonData = Record<string, number>;
export type SynergyEffectJsonData = { targetSkill: string; ranksRequired: number; bonus: number };
export type SkillSynergiesJsonData = Record<string, SynergyEffectJsonData[]>;

export interface CharacterFavoredEnemy {
  id: string;
  type: LocalizedString; // Changed
  note?: LocalizedString; // Changed
}
export interface DomainSpell {
  level: number;
  spellId: string;
  spellName?: LocalizedString; // Changed
}

export interface DomainDefinition {
  value: DomainId;
  label: LocalizedString; // Changed
  description: LocalizedString; // Changed
  grantedPowerDescription: LocalizedString; // Changed
  grantedPowerFeatId?: string;
  domainSpells: DomainSpell[];
  deityAlignmentRestrictions?: CharacterAlignment[];
}

export interface MagicSchoolDefinition {
  value: MagicSchoolId;
  label: LocalizedString; // Changed
  description?: LocalizedString; // Changed
}

export interface CharacterAnimalCompanion {
  id: string;
  name?: LocalizedString; // Changed
  type?: LocalizedString; // e.g., "Wolf", "Hawk"
  notes?: LocalizedString; // Changed
  // Basic stats might be added later
}

export interface Character {
  id: string;
  name: string;
  playerName?: string;
  campaign?: string;
  homeland?: LocalizedString; // Changed
  race: DndRaceId | '';
  alignment: CharacterAlignment;
  deity?: DndDeityId | string;
  size: CharacterSize;
  sizeModifierAttack?: number;
  age: number;
  gender: GenderId | string | '';
  height?: string;
  weight?: string;
  eyes?: LocalizedString; // Changed
  hair?: LocalizedString; // Changed
  skin?: LocalizedString; // Changed
  languages?: LanguageId[];
  experiencePoints?: number;
  abilityScores: AbilityScores;
  abilityScoreTempCustomModifiers: AbilityScores;
  hp: number;
  maxHp: number;
  baseMaxHp: number;
  customMaxHpModifier: number;
  nonlethalDamage: number;
  temporaryHp: number;
  numberOfWounds: number;
  armorBonus: number;
  shieldBonus: number;
  sizeModifierAC: number;
  naturalArmor: number;
  deflectionBonus: number;
  dodgeBonus: number;
  acMiscModifier: number;
  babMiscModifier: number;
  initiativeMiscModifier: number;
  grappleMiscModifier: number;
  grappleWeaponChoice: string;
  grappleDamage_baseNotes: string;
  grappleDamage_bonus: number;
  savingThrows: SavingThrows;
  classes: CharacterClass[];
  skills: Skill[];
  feats: CharacterFeatInstance[];
  inventory: Item[];
  personalStory?: LocalizedString; // Changed
  portraitDataUrl?: string;
  fireResistance: ResistanceValue;
  coldResistance: ResistanceValue;
  acidResistance: ResistanceValue;
  electricityResistance: ResistanceValue;
  sonicResistance: ResistanceValue;
  spellResistance: ResistanceValue;
  powerResistance: ResistanceValue;
  damageReduction: DamageReductionInstance[];
  fortification: ResistanceValue;
  landSpeed: SpeedDetails;
  burrowSpeed: SpeedDetails;
  climbSpeed: SpeedDetails;
  flySpeed: SpeedDetails;
  swimSpeed: SpeedDetails;
  armorSpeedPenalty_base: number;
  armorSpeedPenalty_miscModifier: number;
  loadSpeedPenalty_base: number;
  loadSpeedPenalty_miscModifier: number;
  chosenCombatStyle?: "archery" | "twoWeaponFighting";
  chosenFavoredEnemies?: CharacterFavoredEnemy[];
  chosenDomains?: [DomainId | undefined, DomainId | undefined];
  chosenSpecializationSchool?: MagicSchoolId;
  prohibitedSchools?: MagicSchoolId[];
  powerAttackValue?: number;
  combatExpertiseValue?: number;
  animalCompanion?: CharacterAnimalCompanion; // Added
}

// Informational/Breakdown types
export type ResistanceFieldKeySheet = Exclude<keyof Pick<Character,
  'fireResistance' | 'coldResistance' | 'acidResistance' | 'electricityResistance' | 'sonicResistance' |
  'spellResistance' | 'powerResistance' | 'fortification'
>, 'damageReduction'>;

export type SpeedType = 'land' | 'burrow' | 'climb' | 'fly' | 'swim';

export interface ComboboxOption {
  value: string;
  label: LocalizedString; // Changed
}

export interface GenericBreakdownItem {
  label: LocalizedString; // Changed
  value: string | number;
  isBold?: boolean;
  isSubItem?: boolean;
  isRawValue?: boolean;
}

export type InfoDialogContentType =
  | { type: 'race' }
  | { type: 'class' }
  | { type: 'alignmentSummary' }
  | { type: 'deity' }
  | { type: 'abilityScoreBreakdown'; abilityName: Exclude<AbilityName, 'none'> }
  | { type: 'skillModifierBreakdown'; skillId: string }
  | { type: 'resistanceBreakdown'; resistanceField: ResistanceFieldKeySheet }
  | { type: 'acBreakdown'; acType: 'Normal' | 'Touch' | 'Flat-Footed' }
  | { type: 'babBreakdown' }
  | { type: 'initiativeBreakdown' }
  | { type: 'grappleModifierBreakdown' }
  | { type: 'grappleDamageBreakdown' }
  | { type: 'speedBreakdown'; speedType: SpeedType }
  | { type: 'armorSpeedPenaltyBreakdown' }
  | { type: 'loadSpeedPenaltyBreakdown' }
  | { type: 'savingThrowBreakdown'; saveType: SavingThrowType }
  | { type: 'maxHpBreakdown' }
  | { type: 'genericHtml'; title: LocalizedString; content: LocalizedString } // Changed
  | { type: 'genericNumericalBreakdown'; titleKey: keyof ProcessedSiteData['UI_STRINGS']; components: GenericBreakdownItem[] };


export interface SkillDefinitionForDisplay {
  id: string;
  name: LocalizedString; // Changed
  keyAbility: AbilityName;
  description?: LocalizedString; // Changed
  isCustom: boolean;
  providesSynergies?: CustomSynergyRule[];
}


export interface AbilityScoreComponentValue extends AggregatedFeatEffectBase {
  sourceLabel: LocalizedString; // Changed
  sourceDetail?: LocalizedString; // Changed
  value: number;
}
export interface AbilityScoreBreakdown {
  ability: Exclude<AbilityName, 'none'>;
  base: number;
  components: AbilityScoreComponentValue[];
  finalScore: number;
}
export type DetailedAbilityScores = Record<Exclude<AbilityName, 'none'>, AbilityScoreBreakdown>;

export interface AvailableFeatSlotsBreakdown {
  total: number;
  base: number;
  racial: number;
  classBonus: number;
  classBonusDetails: Array<{ category: string; count: number; sourceFeatLabel?: LocalizedString }>; // Changed
}

export interface AggregatedFeatEffects {
  skillBonuses: Record<string, number>;
  allSkillEffectDetails: Array<SkillEffectDetail & AggregatedFeatEffectBase>;
  favoredEnemyBonuses?: { skillBonus: number; damageBonus: number; };
  favoredEnemySlots?: number;
  abilityScoreBonuses: Array<AbilityScoreEffect & AggregatedFeatEffectBase>;
  savingThrowBonuses: Array<SavingThrowEffect & AggregatedFeatEffectBase>;
  attackRollBonuses: Array<AttackRollEffect & AggregatedFeatEffectBase>;
  damageRollBonuses: Array<DamageRollEffect & AggregatedFeatEffectBase>;
  acBonuses: Array<ArmorClassEffect & AggregatedFeatEffectBase>;
  hpBonus: number;
  hpBonusSources: Array<{ sourceFeatName: LocalizedString; value: number; condition?: string; isActive?: boolean; }>; // Changed
  initiativeBonus: number;
  speedBonuses: Array<SpeedEffect & AggregatedFeatEffectBase>;
  resistanceBonuses: Array<ResistanceEffect & AggregatedFeatEffectBase>;
  damageReductions: Array<DamageReductionFeatEffect & AggregatedFeatEffectBase>;
  casterLevelCheckBonuses: Array<CasterLevelCheckEffect & AggregatedFeatEffectBase>;
  spellSaveDcBonuses: Array<SpellSaveDcEffect & AggregatedFeatEffectBase>;
  turnUndeadBonuses: Array<TurnUndeadEffect & AggregatedFeatEffectBase>;
  grantedAbilities: Array<GrantsAbilityEffect & AggregatedFeatEffectBase & { uses?: GrantsAbilityEffectUses }>;
  modifiedMechanics: Record<string, AggregatedFeatEffectBase & { value?: any }>;
  proficienciesGranted: Array<GrantsProficiencyEffect & AggregatedFeatEffectBase>;
  bonusFeatSlots: Array<BonusFeatSlotEffect & AggregatedFeatEffectBase>;
  languagesGranted: {
      count: number;
      specific: Array<{ languageId: LanguageId; note?: LocalizedString; sourceFeat?: LocalizedString; condition?: string; isActive?: boolean; }>; // Changed
  };
  descriptiveNotes: Array<(NoteEffectDetail) & AggregatedFeatEffectBase>;
  classLevels: Record<DndClassId, number>;
}

export type CombatPanelCharacterData = Pick<Character,
  'abilityScores' | 'classes' | 'size' | 'inventory' | 'feats' |
  'babMiscModifier' | 'initiativeMiscModifier' | 'grappleMiscModifier' |
  'grappleDamage_baseNotes' | 'grappleDamage_bonus' | 'grappleWeaponChoice' |
  'sizeModifierAttack' | 'powerAttackValue' | 'combatExpertiseValue'
>;


export interface BabBreakdownDetails {
  baseBabFromClasses: number[];
  featAttackBonus: number;
  miscModifier: number;
  totalBab: number[];
  characterClassLabel?: LocalizedString; // Changed
}
export interface InitiativeBreakdownDetails {
  dexModifier: number;
  featBonus: number;
  miscModifier: number;
  totalInitiative: number;
}
export interface GrappleModifierBreakdownDetails {
  baseAttackBonus: number;
  strengthModifier: number;
  sizeModifierGrapple: number;
  featBonus: number;
  miscModifier: number;
  totalGrappleModifier: number;
}
export interface GrappleDamageBreakdownDetails {
  baseDamage: string;
  strengthModifier: number;
  featBonus: number;
  bonus: number;
}
export interface SpeedComponent {
  source: LocalizedString; // Changed
  value: number | string;
}
export interface SpeedBreakdownDetails {
  name: LocalizedString; // Changed
  components: SpeedComponent[];
  total: number;
}

export interface PrerequisiteMessage {
  text: LocalizedString; // Changed
  isMet: boolean;
  orderKey: string;
  originalText?: LocalizedString; // Changed
}

export interface AcBreakdownDetailItem {
  mainLabel: LocalizedString | React.ReactNode; // Changed
  value: string | number | React.ReactNode;
  isBold?: boolean;
  suffixDetails?: LocalizedString[]; // Changed
  type?: 'acAbilityMod' | 'acSizeMod' | 'acFeatBonus';
  abilityAbbr?: string;
  sizeName?: LocalizedString; // Changed
  condition?: string;
  isActive?: boolean;
  isSubItem?: boolean;
}

export interface SavingThrowFeatComponent extends AggregatedFeatEffectBase {
  sourceFeat: LocalizedString; // Changed
  value: number;
}

export interface SavingThrowBreakdownDetails {
  saveType: SavingThrowType;
  saveTypeLabel: LocalizedString; // Changed
  baseSave: number;
  abilityKey: Exclude<AbilityName, 'none'> | undefined;
  abilityMod: number;
  magicMod: number;
  userTemporaryModifier: number;
  featBonusTotal: number;
  featComponents: SavingThrowFeatComponent[];
  totalSave: number;
}

export interface ProcessedSiteData {
  ALIGNMENTS: readonly CharacterAlignmentObject[];
  LANGUAGES: readonly LanguageOption[];
  XP_TABLE: readonly { level: number; xpRequired: number }[];
  EPIC_LEVEL_XP_INCREASE: number;
  SIZES: readonly CharacterSizeObject[];
  GENDERS: readonly { value: GenderId | string; label: LocalizedString }[]; // Changed
  DND_RACES: readonly DndRaceOption[];
  DND_CLASSES: readonly DndClassOption[];
  DND_DEITIES: readonly DndDeityOption[];
  DND_DOMAINS: readonly DomainDefinition[];
  DND_MAGIC_SCHOOLS: readonly MagicSchoolDefinition[];
  SKILL_DEFINITIONS: readonly SkillDefinitionJsonData[];
  DND_FEATS_DEFINITIONS: readonly FeatDefinitionJsonData[];
  FEAT_TYPES: readonly { value: FeatTypeString; label: LocalizedString }[]; // Changed
  ABILITY_LABELS: readonly { value: Exclude<AbilityName, 'none'>; label: LocalizedString; abbr: string }[]; // Changed
  SAVING_THROW_LABELS: readonly { value: SavingThrowType; label: LocalizedString }[]; // Changed
  DAMAGE_REDUCTION_TYPES: readonly { value: DamageReductionTypeValue; label: LocalizedString }[]; // Changed
  DAMAGE_REDUCTION_RULES_OPTIONS: readonly { value: DamageReductionRuleValue; label: LocalizedString }[]; // Changed
  ALIGNMENT_PREREQUISITE_OPTIONS: readonly { value: string; label: LocalizedString }[]; // Changed
  DEFAULT_ABILITIES: AbilityScores;
  DEFAULT_SAVING_THROWS: SavingThrows;
  DEFAULT_RESISTANCE_VALUE: ResistanceValue;
  DEFAULT_SPEED_DETAILS: SpeedDetails;
  DEFAULT_SPEED_PENALTIES: { armorSpeedPenalty_base: number; armorSpeedPenalty_miscModifier: number; loadSpeedPenalty_base: number; loadSpeedPenalty_miscModifier: number };
  DND_RACE_MIN_ADULT_AGE_DATA: Record<string, number>;
  DND_RACE_BASE_MAX_AGE_DATA: Record<string, number>;
  RACE_TO_AGING_CATEGORY_MAP_DATA: Record<string, string>;
  DND_RACE_AGING_EFFECTS_DATA: Record<string, { categories: Array<{ categoryName: LocalizedString; ageFactor: number; effects: Record<string, number> }> }>; // Changed categoryName
  DND_RACE_ABILITY_MODIFIERS_DATA: Record<string, Partial<Record<Exclude<AbilityName, 'none'>, number>>>;
  DND_RACE_SKILL_POINTS_BONUS_PER_LEVEL_DATA: Record<string, number>;
  CLASS_SKILLS: Record<string, string[]>;
  CLASS_SKILL_POINTS_BASE: Record<string, number>;
  SKILL_SYNERGIES: Record<string, SynergyEffectJsonData[]>;
  UI_STRINGS: Record<string, string>; // This will be constructed by getLocalizedString for the current language
}

export type FeatDefinitionWithEffects = FeatDefinitionJsonData & { effects: FeatEffectDetail[] };
export const isFeatWithEffects = (feat: FeatDefinitionJsonData): feat is FeatDefinitionWithEffects => {
  return Array.isArray(feat.effects) && feat.effects.length > 0;
};

export type CharacterUpdateField = keyof Character | `savingThrows.${keyof SavingThrows}.${'base'|'magicMod'|'miscMod'}` | `${ResistanceFieldKeySheet}.customMod` | 'damageReduction' | 'powerAttackValue' | 'combatExpertiseValue';

export { type AbilityScoreComponentValue };

export * from './character-core'; // Re-export everything from itself for simplicity in other files, even though it causes a circular-like structure here, it's fine for type aggregation.
