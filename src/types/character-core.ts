
// This file now contains core type definitions that are NOT dependent on i18n data.
// Definitions that rely on labels from JSON (like SIZES, ALIGNMENTS array constants)
// will be generated by the I18nProvider and accessed via context.

export type AbilityName = 'strength' | 'dexterity' | 'constitution' | 'intelligence' | 'wisdom' | 'charisma' | 'none';

export interface AbilityScores {
  strength: number;
  dexterity: number;
  constitution: number;
  intelligence: number;
  wisdom: number;
  charisma: number;
}

export interface CharacterClass {
  id: string;
  className: DndClassId | ''; // kebab-case ID
  level: number;
}

export interface CustomSynergyRule {
  id: string;
  targetSkillName: string; // Skill ID
  ranksInThisSkillRequired: number;
  bonusGranted: number;
}

export interface Skill {
  id: string;
  ranks: number;
  miscModifier: number;
  isClassSkill?: boolean;
}

export interface FeatPrerequisiteDetails {
  bab?: number;
  abilities?: Partial<Record<Exclude<AbilityName, 'none'>, number>>;
  skills?: Array<{ id: string; ranks: number }>;
  feats?: string[];
  casterLevel?: number;
  classLevel?: { classId: DndClassId | string; level: number };
  raceId?: DndRaceId | string;
  alignment?: string; // This might be a specific alignment value or a generic one like "lawful"
  special?: string;
}

export interface FeatEffectDetails {
  skills?: Record<string, number>;
  abilities?: Partial<Record<Exclude<AbilityName, 'none'>, number>>;
}

export type FeatTypeString = string; // Will be defined by FEAT_TYPES_DATA from JSON

export interface FeatDefinitionJsonData { // Base structure for feat definitions
  value: string;
  label: string;
  description?: string;
  prerequisites?: FeatPrerequisiteDetails;
  effects?: FeatEffectDetails;
  effectsText?: string;
  canTakeMultipleTimes?: boolean;
  requiresSpecialization?: string;
  type?: FeatTypeString;
  isClassFeature?: boolean;
  isCustom?: boolean; // Added to distinguish custom global feats
}

export interface CharacterFeatInstance {
  definitionId: string;
  instanceId: string;
  specializationDetail?: string;
  isGranted?: boolean;
  grantedNote?: string;
}

export interface Item {
  id: string;
  name: string;
  quantity: number;
  description?: string;
  weight?: number;
}

export type SavingThrowType = 'fortitude' | 'reflex' | 'will';

export interface SingleSavingThrow {
  base: number;
  magicMod: number;
  miscMod: number;
}
export interface SavingThrows {
  fortitude: SingleSavingThrow;
  reflex: SingleSavingThrow;
  will: SingleSavingThrow;
}

export interface ResistanceValue {
  base: number;
  customMod: number;
}

export type DamageReductionTypeValue = string; // From JSON
export type DamageReductionRuleValue = string; // From JSON

export interface DamageReductionInstance {
  id: string;
  value: number;
  type: DamageReductionTypeValue | string;
  rule: DamageReductionRuleValue;
  isGranted?: boolean;
  source?: string;
}

export interface SpeedDetails {
  base: number;
  miscModifier: number;
}

export type CharacterSize =
  | "fine" | "diminutive" | "tiny" | "small" | "medium" | "large" | "huge" | "gargantuan" | "colossal" | '';

export type CharacterAlignment =
  | "lawful-good" | "neutral-good" | "chaotic-good"
  | "lawful-neutral" | "true-neutral" | "chaotic-neutral"
  | "lawful-evil" | "neutral-evil" | "chaotic-evil" | '';

export type DndRaceId = string;
export type DndClassId = string;
export type DndDeityId = string;
export type GenderId = string;

export interface CharacterSizeObject { // Processed size object
  value: CharacterSize;
  label: string;
  acModifier: number;
  skillModifiers?: Record<string, number>;
  grappleDamage?: string;
}

export interface CharacterAlignmentObject { // Processed alignment object
  value: CharacterAlignment;
  label: string;
  description: string;
}

export interface ClassCastingDetails {
  type: 'full' | 'partial' | 'none';
  startsAtLevel?: number;
  levelOffset?: number;
}
export interface DndRaceOption { // Processed race option
  value: DndRaceId;
  label: string;
  description?: string;
  bonusFeatSlots?: number;
  racialSkillBonuses?: Record<string, number>;
  grantedFeats?: Array<{ featId: string; note?: string; name?: string; levelAcquired?: number }>;
  speeds?: Partial<Record<SpeedType, number>>;
}
export interface DndClassOption { // Processed class option
  value: DndClassId | string;
  label: string;
  hitDice: string;
  description: string;
  casting?: ClassCastingDetails;
  grantedFeats?: Array<{ featId: string; note?: string; name?: string; levelAcquired?: number }>;
  saves?: {
    fortitude: "good" | "poor";
    reflex: "good" | "poor";
    will: "good" | "poor";
  };
}
export interface DndDeityOption { // Processed deity option
  value: DndDeityId | string;
  label: string;
  alignment: CharacterAlignment;
  description?: string;
}

export interface SkillDefinitionJsonData { // Structure for skill definition from JSON
  value: string;
  label: string;
  keyAbility: AbilityName | string;
  description?: string;
}

export type ClassSkillsJsonData = Record<string, string[]>;
export type ClassSkillPointsBaseJsonData = Record<string, number>;
export type SynergyEffectJsonData = { targetSkill: string; ranksRequired: number; bonus: number };
export type SkillSynergiesJsonData = Record<string, SynergyEffectJsonData[]>;


export interface Character {
  id: string;
  name: string;
  playerName?: string;
  campaign?: string;
  race: DndRaceId | '';
  alignment: CharacterAlignment;
  deity?: DndDeityId | string;
  size: CharacterSize;
  age: number;
  gender: GenderId | string | '';
  height?: string;
  weight?: string;
  eyes?: string;
  hair?: string;
  skin?: string;
  abilityScores: AbilityScores;
  abilityScoreTempCustomModifiers: AbilityScores;
  hp: number;
  maxHp: number;
  armorBonus: number;
  shieldBonus: number;
  sizeModifierAC: number;
  naturalArmor: number;
  deflectionBonus: number;
  dodgeBonus: number;
  acMiscModifier: number;
  babMiscModifier: number;
  initiativeMiscModifier: number;
  grappleMiscModifier: number;
  grappleWeaponChoice: string;
  grappleDamage_baseNotes: string;
  grappleDamage_bonus: number;
  savingThrows: SavingThrows;
  classes: CharacterClass[];
  skills: Skill[];
  feats: CharacterFeatInstance[];
  inventory: Item[];
  personalStory?: string;
  portraitDataUrl?: string;
  fireResistance: ResistanceValue;
  coldResistance: ResistanceValue;
  acidResistance: ResistanceValue;
  electricityResistance: ResistanceValue;
  sonicResistance: ResistanceValue;
  spellResistance: ResistanceValue;
  powerResistance: ResistanceValue;
  damageReduction: DamageReductionInstance[];
  fortification: ResistanceValue;
  landSpeed: SpeedDetails;
  burrowSpeed: SpeedDetails;
  climbSpeed: SpeedDetails;
  flySpeed: SpeedDetails;
  swimSpeed: SpeedDetails;
  armorSpeedPenalty_base: number;
  armorSpeedPenalty_miscModifier: number;
  loadSpeedPenalty_base: number;
  loadSpeedPenalty_miscModifier: number;
}

// Informational/Breakdown types
export type ResistanceFieldKeySheet = Exclude<keyof Pick<Character,
  'fireResistance' | 'coldResistance' | 'acidResistance' | 'electricityResistance' | 'sonicResistance' |
  'spellResistance' | 'powerResistance' | 'fortification'
>, 'damageReduction'>;

export type SpeedType = 'land' | 'burrow' | 'climb' | 'fly' | 'swim';

export type InfoDialogContentType =
  | { type: 'race' }
  | { type: 'class' }
  | { type: 'alignmentSummary' }
  | { type: 'deity' }
  | { type: 'abilityScoreBreakdown'; abilityName: Exclude<AbilityName, 'none'> }
  | { type: 'skillModifierBreakdown'; skillId: string }
  | { type: 'resistanceBreakdown'; resistanceField: ResistanceFieldKeySheet }
  | { type: 'acBreakdown'; acType: 'Normal' | 'Touch' | 'Flat-Footed' }
  | { type: 'babBreakdown' }
  | { type: 'initiativeBreakdown' }
  | { type: 'grappleModifierBreakdown' }
  | { type: 'grappleDamageBreakdown' }
  | { type: 'speedBreakdown'; speedType: SpeedType }
  | { type: 'armorSpeedPenaltyBreakdown' }
  | { type: 'loadSpeedPenaltyBreakdown' }
  | { type: 'genericHtml'; title: string; content: string };

export interface SkillDefinitionForDisplay {
  id: string;
  name: string;
  keyAbility: AbilityName;
  description?: string;
  isCustom: boolean;
  providesSynergies?: CustomSynergyRule[];
}

export interface AbilityScoreComponentValue {
  source: string;
  value: number;
}
export interface AbilityScoreBreakdown {
  ability: Exclude<AbilityName, 'none'>;
  base: number;
  components: AbilityScoreComponentValue[];
  finalScore: number;
}
export type DetailedAbilityScores = Record<Exclude<AbilityName, 'none'>, AbilityScoreBreakdown>;

export interface BabBreakdownDetails {
  baseBabFromClasses: number[];
  miscModifier: number;
  totalBab: number[];
  characterClassLabel?: string;
}
export interface InitiativeBreakdownDetails {
  dexModifier: number;
  miscModifier: number;
  totalInitiative: number;
}
export interface GrappleModifierBreakdownDetails {
  baseAttackBonus: number;
  strengthModifier: number;
  sizeModifierGrapple: number;
  miscModifier: number;
  totalGrappleModifier: number;
}
export interface GrappleDamageBreakdownDetails {
  baseDamage: string;
  bonus: number;
  strengthModifier: number;
}
export interface SpeedComponent {
  source: string;
  value: number | string;
}
export interface SpeedBreakdownDetails { // Also used for penalty breakdowns
  name: string;
  components: SpeedComponent[];
  total: number;
}

export interface PrerequisiteMessage {
  text: string;
  isMet: boolean;
  orderKey: string;
  originalText?: string;
}
